name: CI/CD for PHP App

on:
  push:
    branches: [ "main" ]

jobs:
  # Job 1: Run unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Run PHPUnit Tests
        run: vendor/bin/phpunit tests

  # Job 2: Run Static Application Security Testing (SAST)
  sast:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Run PHPStan Analysis (SAST)
        run: vendor/bin/phpstan analyse -c phpstan.neon --level=4

      - name: Security Scan Dependencies with Composer Audit (SAST)
        run: composer audit

  # Job 3: Deploy to a temporary environment for DAST scanning
  deploy_for_dast:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      # Note: For a real app, you might need to install dependencies
      # and prepare a database or .env file here.
      - name: Install Dependencies
        run: composer install --no-interaction --no-progress

      - name: Start PHP Server for DAST
        # Starts a server in the public directory on port 8000.
        # The '&' runs it in the background so the workflow can continue.
        run: |
          echo "Starting PHP server on localhost:8000"
          php -S localhost:8000 -t public &
          sleep 5 # Give server time to start

  # Job 4: Run Dynamic Application Security Testing (DAST)
  dast:
    needs: deploy_for_dast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OWASP ZAP Baseline Scan (DAST)
        uses: zaproxy/action-baseline@v0.11.0
        with:
          # URL of the application to scan
          target: 'http://localhost:8000'
          # Fail the build if any alerts are found
          fail_action: true
          # You can specify a rules file for more control
          # rules_file_name: '.zap/rules.tsv'
          # Generate a report
          report_title: 'OWASP ZAP DAST Report'
          report_artifact_name: 'zap_dast_report'


  # Job 5: Deploy to Staging (if all previous jobs succeed)
  deploy:
    needs: dast
    runs-on: ubuntu-latest
    steps:
      - name: Simulated Deploy to Staging
        run: echo "DAST passed! Deploying to staging environment..."
      # Add your actual deployment script here
      # (e.g., using scp, rsync, or a cloud provider's CLI)
